package inventory.service;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;

import inventory.dao.ProductInStockDAO;
import inventory.dao.ProductInStockDAO;
import inventory.dao.ProductInfoDAO;
import inventory.model.ProductInStock;
import inventory.model.Paging;
import inventory.model.ProductInStock;
import inventory.model.ProductInfo;

public class ProductInStockService {
	
	@Autowired
	private ProductInStockDAO<ProductInStock> productInStockDAO;
	
	public final static Logger log = Logger.getLogger(ProductService.class);
	
	/* ============================================================ CATEGORY SERVICE =================================================================*/
	// If show list productInStock by search property, show list search, else show all productInStock
	public List<ProductInStock> getAll(ProductInStock productInStock, Paging paging) {
		log.info("Show all productInStock");
		/* Create query String
		 * @StringBuilder create query string
		 * @Map<String, Object> map parameter to query
		*/
		StringBuilder queryStr = new StringBuilder();
		Map<String, Object> mapParams = new HashMap<>();
		if (productInStock != null && productInStock.getProductInfo() != null) {
			if (productInStock.getId() != null && productInStock.getId() != 0) {
				queryStr.append(" and model.id = :id");
				mapParams.put("id", productInStock.getId());
			}
			if (productInStock.getCode() != null && !StringUtils.isEmpty(productInStock.getCode())) {
				queryStr.append(" and model.code = :code");
				mapParams.put("code", productInStock.getCode());
			}
			if (productInStock.getName() != null && !StringUtils.isEmpty(productInStock.getName())) {
				queryStr.append(" and model.name like :name");
				mapParams.put("name", "%" + productInStock.getName() + "%");
			}
		}
		return productInStockDAO.findAll(queryStr.toString(), mapParams, paging);
	}
	
	public ProductInStock findByIdProductInStock(int id) {
		log.info("Find productInStock by id: " + id);
		return productInStockDAO.findById(ProductInStock.class, id);
	}
	
	public void saveProductInStock(ProductInStock productInStock) throws Exception{
		log.info("Insert catergory: " + productInStock.toString());
		// Set ActiveFlag, Create/Update Date
		productInStock.setActiveFlag(1);
		productInStock.setCreateDate(new Date());
		productInStock.setUpdateDate(new Date());
		productInStockDAO.save(productInStock);
	}
	
	public void updateProductInStock(ProductInStock productInStock) throws Exception{
		log.info("Update catergory: " + productInStock.toString());
		// Set Update Date
		productInStock.setUpdateDate(new Date());
		productInStockDAO.update(productInStock);
	}
	// Not delete physical => just set active flag = 0
	public void deleteProductInStock(ProductInStock productInStock) throws Exception{
		productInStock.setActiveFlag(0);
		// Set Update Date
		productInStock.setUpdateDate(new Date());
		log.info("Delete productInStock: " + productInStock.toString());
		productInStockDAO.update(productInStock);
	}
	
	public List<ProductInStock> findProductInStock(String property, Object value) {
		log.info("============== Find by property start ====================");
		log.info("property = " + property + "value = " + value);
		return productInStockDAO.findByProperty(property, value);
	}
}
