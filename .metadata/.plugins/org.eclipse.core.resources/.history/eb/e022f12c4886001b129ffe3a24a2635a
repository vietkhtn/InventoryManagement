package inventory.service;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;

import inventory.dao.ProductInStockDAO;
import inventory.model.ProductInStock;
import inventory.model.Invoice;
import inventory.model.Paging;

public class ProductInStockService {
	
	@Autowired
	private ProductInStockDAO<ProductInStock> productInStockDAO;
	
	public final static Logger log = Logger.getLogger(ProductService.class);
	
	/* ============================================================ CATEGORY SERVICE =================================================================*/
	// If show list productInStock by search property, show list search, else show all productInStock
	public List<ProductInStock> getAll(ProductInStock productInStock, Paging paging) {
		log.info("Show all productInStock");
		/* Create query String
		 * @StringBuilder create query string
		 * @Map<String, Object> map parameter to query
		*/
		StringBuilder queryStr = new StringBuilder();
		Map<String, Object> mapParams = new HashMap<>();
		if (productInStock != null && productInStock.getProductInfo() != null) {
			
			if (!StringUtils.isEmpty(productInStock.getProductInfo().getCategory().getName())) {
				queryStr.append(" and model.productInfo.category.name like :cateName");
				mapParams.put("cateName", "%" + productInStock.getProductInfo().getCategory().getName() + "%");
			}
			
			if (productInStock.getProductInfo().getCode() != null && !StringUtils.isEmpty(productInStock.getProductInfo().getCode())) {
				queryStr.append(" and model.productInfo.code = :code");
				mapParams.put("code", productInStock.getProductInfo().getCode());
			}
			
			if (productInStock.getProductInfo().getName() != null && !StringUtils.isEmpty(productInStock.getProductInfo().getName())) {
				queryStr.append(" and model.productInfo.name like :name");
				mapParams.put("name", "%" + productInStock.getProductInfo().getName() + "%");
			}
		}
		return productInStockDAO.findAll(queryStr.toString(), mapParams, paging);
	}
	
	// Insert or Update product in stock depend on invoice created
	public void saveOrUpdate(Invoice invoice) throws Exception{
		
	}

}
