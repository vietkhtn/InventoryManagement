package inventory.controller;

import java.util.List;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.PathVariable;

import inventory.model.Category;
import inventory.model.Users;
import inventory.service.ProductService;
import inventory.validate.CategoryValidator;

@Controller
public class CategoryController {
	
	@Autowired
	private ProductService productService;
	@Autowired
	private CategoryValidator categoryValidator;
	
	static final Logger log = Logger.getLogger(Category.class);
	
	@InitBinder
	private void initBinder(WebDataBinder binder) {
		if(binder.getTarget()==null) return;
		if(binder.getTarget().getClass() == Category.class) {
			binder.setValidator(categoryValidator);
		}
	}
	
	@GetMapping("category/list")
	public String showCategoryList(Model model) {
		List<Category> listCategory = productService.getAllCategory();
		model.addAttribute("categories", listCategory);
		return "category-list";
	}
	
	// Show form add for user input
	@GetMapping("category/add")
	public String add(Model model) {
		log.info("Add new Category");
		//Generate title page dynamic
		model.addAttribute("titlePage", "Add Category");
		//Generate form add category
		model.addAttribute("modelForm", new Category());
		//If in view mode => cannot input value
		model.addAttribute("viewOnly", false);
		return "category-action";
	}
	
	@GetMapping("category/edit/{id}")
	public String edit(Model model, @PathVariable("id") int id) {
		log.info("Edit category with id = " + id);
		Category category = productService.findByIdCategory(id);
		// if category valid in db
		if(category != null) {
			model.addAttribute("titlePage", "Edit Category");
			model.addAttribute("modelForm", category);
			model.addAttribute("viewOnly", false);
			return "category-action";
		}
		// if not valid => go back to category/list
		return "redirect:/category/list";
	}
	
	@GetMapping("category/view/{id}")
	public String view(Model model, @PathVariable("id") int id) {
		log.info("Edit category with id = " + id);
		Category category = productService.findByIdCategory(id);
		// if category valid in db
		if(category != null) {
			model.addAttribute("titlePage", "View Category");
			model.addAttribute("modelForm", category);
			model.addAttribute("viewOnly", true);
			return "category-action";
		}
		// if not valid => go back to category/list
		return "redirect:/category/list";
	}
		
} 
