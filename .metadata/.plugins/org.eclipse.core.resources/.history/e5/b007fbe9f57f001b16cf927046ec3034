package inventory.service;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import  org.apache.commons.lang.StringUtils;

import inventory.dao.CategoryDAO;
import inventory.dao.ProductInfoDAO;
import inventory.model.Category;
import inventory.model.Paging;
import inventory.model.ProductInfo;

@Service
public class ProductService {
	
	@Autowired
	private CategoryDAO<Category> categoryDAO;
	
	@Autowired
	private ProductInfoDAO<ProductInfo> productInfoDAO;
	
	public final static Logger log = Logger.getLogger(ProductService.class);
	
	/* ============================================================ Category Service =================================================================*/
	// If show list category by search property, show list search, else show all category
	public List<Category> getAllCategory(Category category, Paging paging) {
		log.info("Show all category");
		/* Create query String
		 * @StringBuilder create query string
		 * @Map<String, Object> map parameter to query
		*/
		StringBuilder queryStr = new StringBuilder();
		Map<String, Object> mapParams = new HashMap<>();
		if (category != null ) {
			if (category.getId() != null && category.getId() != 0) {
				queryStr.append(" and model.id = :id");
				mapParams.put("id", category.getId());
			}
			if (category.getCode() != null && !StringUtils.isEmpty(category.getCode())) {
				queryStr.append(" and model.code = :code");
				mapParams.put("code", category.getCode());
			}
			if (category.getName() != null && !StringUtils.isEmpty(category.getName())) {
				queryStr.append(" and model.name like :name");
				mapParams.put("name", "%" + category.getName() + "%");
			}
		}
		return categoryDAO.findAll(queryStr.toString(), mapParams, paging);
	}
	
	public Category findByIdCategory(int id) {
		log.info("Find category by id: " + id);
		return categoryDAO.findById(Category.class, id);
	}
	
	public void saveCategory(Category category) throws Exception{
		log.info("Insert catergory: " + category.toString());
		// Set ActiveFlag, Create/Update Date
		category.setActiveFlag(1);
		category.setCreateDate(new Date());
		category.setUpdateDate(new Date());
		categoryDAO.save(category);
	}
	
	public void updateCategory(Category category) throws Exception{
		log.info("Update catergory: " + category.toString());
		// Set Update Date
		category.setUpdateDate(new Date());
		categoryDAO.update(category);
	}
	// Not delete physical => just set active flag = 0
	public void deleteCategory(Category category) throws Exception{
		category.setActiveFlag(0);
		// Set Update Date
		category.setUpdateDate(new Date());
		log.info("Delete category: " + category.toString());
		categoryDAO.update(category);
	}
	
	public List<Category> findCategory(String property, Object value) {
		log.info("============== Find by property start ====================");
		log.info("property = " + property + "value = " + value);
		return categoryDAO.findByProperty(property, value);
	}
	
	
	/*===================================================================== Product Info Service ====================================================================*/
	// If show list ProductInfo by search property, show list search, else show all ProductInfo
	public List<ProductInfo> getAllProductInfo(ProductInfo productInfo, Paging paging) {
		log.info("Show all ProductInfo");
		/* Create query String
		 * @StringBuilder create query string
		 * @Map<String, Object> map parameter to query
		*/
		StringBuilder queryStr = new StringBuilder();
		Map<String, Object> mapParams = new HashMap<>();
		if (productInfo != null ) {
			if (productInfo.getId() != null && productInfo.getId() != 0) {
				queryStr.append(" and model.id = :id");
				mapParams.put("id", productInfo.getId());
			}
			if (productInfo.getCode() != null && !StringUtils.isEmpty(productInfo.getCode())) {
				queryStr.append(" and model.code = :code");
				mapParams.put("code", productInfo.getCode());
			}
			if (productInfo.getName() != null && !StringUtils.isEmpty(productInfo.getName())) {
				queryStr.append(" and model.name like :name");
				mapParams.put("name", "%" + productInfo.getName() + "%");
			}
		}
		return productInfoDAO.findAll(queryStr.toString(), mapParams, paging);
	}
	
	public ProductInfo findByIdProductInfo(int id) {
		log.info("Find ProductInfo by id: " + id);
		return productInfoDAO.findById(ProductInfo.class, id);
	}
	
	public void saveProductInfo(ProductInfo ProductInfo) throws Exception{
		log.info("Insert catergory: " + ProductInfo.toString());
		// Set ActiveFlag, Create/Update Date
		ProductInfo.setActiveFlag(1);
		ProductInfo.setCreateDate(new Date());
		ProductInfo.setUpdateDate(new Date());
		productInfoDAO.save(ProductInfo);
	}
	
	public void updateProductInfo(ProductInfo ProductInfo) throws Exception{
		log.info("Update catergory: " + ProductInfo.toString());
		// Set Update Date
		ProductInfo.setUpdateDate(new Date());
		productInfoDAO.update(ProductInfo);
	}
	// Not delete physical => just set active flag = 0
	public void deleteProductInfo(ProductInfo ProductInfo) throws Exception{
		ProductInfo.setActiveFlag(0);
		// Set Update Date
		ProductInfo.setUpdateDate(new Date());
		log.info("Delete ProductInfo: " + ProductInfo.toString());
		productInfoDAO.update(ProductInfo);
	}
	
	public List<ProductInfo> findProductInfo(String property, Object value) {
		log.info("============== Find by property start ====================");
		log.info("property = " + property + "value = " + value);
		return productInfoDAO.findByProperty(property, value);
	}
}
